@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Utya.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Войти</PageTitle>

<section>
    <div class="container w-96 mx-auto px-4 max-w-xl">
        <h1 class="text-5xl py-4 text-gradient">Войти</h1>

        <div class="card card-dash bg-base-200 shadow-lg">
            <div class="card-body">
                <StatusMessage Message="@errorMessage"/>
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <h2 class="card-title">Используйте свой аккаунт Utya</h2>
                    <DataAnnotationsValidator/>

                    <ValidationSummary class="text-danger" role="alert"/>
                    <fieldset class="fieldset">
                        <legend for="Input.Email" class="fieldset-legend">Email</legend>
                        <InputText @bind-Value="Input.Email" id="Input.Email"
                                   class="input w-full" autocomplete="username"
                                   aria-required="true" placeholder="name@example.com"
                                   autofocus/>
                        <ValidationMessage For="() => Input.Email" class="text-danger"/>
                    </fieldset>
                    <fieldset class="fieldset">
                        <legend for="Input.Password" class="fieldset-legend">Пароль</legend>
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                                   class="input w-full"
                                   autocomplete="current-password" aria-required="true" placeholder="СекретныйПароль"/>
                        <ValidationMessage For="() => Input.Password" class="text-danger"/>
                    </fieldset>
                    <fieldset class="fieldset">
                        <label class="label">
                            <InputCheckbox @bind-Value="Input.RememberMe"
                                           class="checkbox darker-border-checkbox form-check-input"/>
                            Запомнить меня
                        </label>
                    </fieldset>

                    <div class="mt-4">
                        <div>
                            <button type="submit" class="btn btn-block btn-lg btn-primary rounded-lg">Log in</button>
                        </div>
                        <div class="divider">ИЛИ</div>
                        <div>
                            <ExternalLoginPicker/>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="text-sm my-4">
            <div class="flex flex-col gap-2 justify-end items-end">
                <a href="Account/ForgotPassword" class="link">Забыли пароль?</a>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                   class="link">Зарегистрироваться</a>
            
                <a href="Account/ResendEmailConfirmation"
                   class="link">Подтвердить почту</a>
            </div>
        </div>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}
