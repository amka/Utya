@page "/App1/Links"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using System.ComponentModel.DataAnnotations
@using Blazored.Toast.Configuration
@using Microsoft.AspNetCore.Components.Sections
@using Utya.Components.Account
@using Utya.Data
@using Utya.Models
@using Utya.Services

@inject ILogger<Links> Logger
@inject IJSRuntime JsRuntime
@inject IdentityUserAccessor UserAccessor
@inject IToastService ToastService
@inject ShortLinkService ShortLinkService

@attribute [StreamRendering]

<PageTitle>Ссылки</PageTitle>

<SectionContent SectionName="top-bar">
    <h3 class="text-2xl">Ссылки</h3>

    <label for="create-link-drawer" class="btn btn-primary rounded-lg">
        <i class="fas fa-plus"></i>
        Создать ссылку
    </label>
</SectionContent>

<BlazoredToasts Position="ToastPosition.TopCenter" IconType="IconType.FontAwesome"
                SuccessClass="text-success" ErrorClass="text-error"/>

<div class="drawer drawer-end">
    <input id="create-link-drawer" type="checkbox" class="drawer-toggle"/>
    <div class="drawer-content">
        <div class="flex flex-col">
            <div class="p-4">
                @if (_links == null)
                {
                    <p>Загружаю&hellip;</p>
                }
                else
                {
                    foreach (var link in _links)
                    {
                        <ShortLinkItem Link="@link" OnCopy="CopyToClipboard"/>
                    }
                }
                @* <Virtualize Items="_links" Context="link"> *@
                @*     <Placeholder> *@
                @*         <p> *@
                @*             Загружаю&hellip; *@
                @*         </p> *@
                @*     </Placeholder> *@
                @*     <ItemContent> *@
                @*         <ShortLinkItem Link="@link" OnCopy="CopyToClipboard"/> *@
                @*     </ItemContent> *@
                @*     <EmptyContent> *@
                @*         <p> *@
                @*             Кажется, у вас пока нет ссылок. *@
                @*         </p> *@
                @*     </EmptyContent> *@
                @* </Virtualize> *@
            </div>
        </div>
    </div>

    <div class="drawer-side">

        <div class="flex flex-col flex-grow w-1/2 max-w-[480px] bg-base-100 h-screen shadow-lg">
            <div class="flex px-4 navbar menu-horizontal align-center gap-2">
                <label id="create-form-label" for="create-link-drawer" aria-label="close sidebar"
                       class="btn btn-square btn-soft rounded-lg">
                    <i class="fas fa-arrow-right-from-bracket"></i>
                </label>
                <h3 class="text-2xl">Создать ссылку</h3>
            </div>

            <CreateLinkForm Loading="@Loading" OnSubmit="OnCreateLinkSubmit"></CreateLinkForm>
        </div>
    </div>
</div>

<script>
    function closeCreateForm() {
        document.getElementById('create-form-label').click();
    }
</script>

@code {
    List<ShortLink>? _links = [];
    int _page = 1;
    int _perPage = 10;

    public class ShortLinkFormModel
    {
        [Required]
        [StringLength(2000, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        [Url(ErrorMessage = "{0} is not a valid URL")]
        public string? Url { get; set; }

        [StringLength(32, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        public string? Password { get; set; }

        public string? CustomAlias { get; set; }

        public Expiration? Expiration { get; set; }
    }

    [CascadingParameter] public ApplicationUser? User { get; set; }

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    { 
        Logger.LogWarning("OnInitializedAsync called");
        // await Task.Delay(100);
        await LoadShortLinks();
    }

    private async Task LoadShortLinks()
    {
        try
        {
            Loading = true;
            await Task.Delay(1);

            _links = await ShortLinkService.GetLinksAsync(_page, _perPage, User).ConfigureAwait(false);
            Logger.LogInformation("Loaded {0} links", _links.Count);
        }
        catch (Exception ex)
        {
            Logger.LogInformation(ex.Message);
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task OnCreateLinkSubmit(ShortLinkFormModel model)
    {
        Logger.LogInformation("Form Submitted: \n..URL: {};\n..CustomAlias: {};\n..Password: {};\n..Expiration: {};", model.Url, model.CustomAlias, model.Password, model.Expiration);
        try
        {
            Loading = true;
            await Task.Delay(1);

            // Calculate expiration datetime based on Expiration select
            var expiredAt = DateTime.UtcNow + model.Expiration switch
            {
                Expiration.SixHours => TimeSpan.FromHours(6),
                Expiration.OneDay => TimeSpan.FromDays(1),
                Expiration.OneWeek => TimeSpan.FromDays(7),
                Expiration.OneMonth => TimeSpan.FromDays(30),
                Expiration.SixMonths => TimeSpan.FromDays(180),
                Expiration.OneYear => TimeSpan.FromDays(365),
                _ => null,
            };

            var createRequest = new CreateShortLinkRequest(model.Url!)
            {
                CustomAlias = model.CustomAlias,
                Password = model.Password,
                ExpiresAt = expiredAt
            };

            await ShortLinkService.CreateShortLinkAsync(createRequest, User);
            await JsRuntime.InvokeVoidAsync("closeCreateForm");
            ToastService.ShowSuccess("Ссылка создана");

            await LoadShortLinks();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CopyToClipboard(string url)
    {
        try
        {
            await JsRuntime.InvokeAsync<string>("navigator.clipboard.writeText", url);
            ToastService.ShowSuccess("Ссылка скопирована в буфер обмена");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ToastService.ShowError("Не удалось скопировать ссылку в буфер обмена");
            throw;
        }
    }

}