@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Utya.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3 class="text-2xl">Profile</h3>
<StatusMessage/>

<div class="mt-4">
    <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post"
              class="max-w-100">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <fieldset class="fieldset">
            <legend for="username" class="fieldset-legend">Username</legend>
            <input type="text" value="@_username" id="username" class="input w-full rounded-lg"
                   placeholder="Choose your username." disabled/>
        </fieldset>
        <fieldset class="fieldset">
            <legend for="Input.PhoneNumber" class="fieldset-legend">Phone number</legend>
            <InputText @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" class="input w-full rounded-lg"
                       placeholder="Enter your phone number"/>
            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
        </fieldset>
        <div class="my-4">
            <button type="submit" class="btn btn-block btn-primary rounded-lg">Save</button>
        </div>
    </EditForm>
</div>


@code {
    private ApplicationUser _user = null!;
    private string? _username;
    private string? _phoneNumber;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.PhoneNumber ??= _phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != _phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}
