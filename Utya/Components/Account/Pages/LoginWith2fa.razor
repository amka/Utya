@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Utya.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<div class="container mx-auto max-w-2xl my-4">
    <h1 class="text-3xl text-gradient">Two-factor authentication</h1>

    <div class="divider"></div>

    <StatusMessage Message="@message"/>
    <p>Your login is protected with an authenticator app. Enter your authenticator code below.</p>
    <div class="my-4">
        <div class="col-md-4">
            <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
                <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
                <input type="hidden" name="RememberMe" value="@RememberMe"/>
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <fieldset class="fieldset">
                    <legend for="Input.TwoFactorCode" class="fieldset-legend">Authenticator code</legend>
                    <InputText @bind-Value="Input.TwoFactorCode" id="Input.TwoFactorCode" class="input w-full"
                               autocomplete="off"/>
                    <ValidationMessage For="() => Input.TwoFactorCode" class="text-danger"/>
                </fieldset>
                <fieldset class="fieldset">
                    <label for="remember-machine" class="fieldset-legend">
                        <InputCheckbox @bind-Value="Input.RememberMachine" class="checkbox"/>
                        Remember this machine
                    </label>
                </fieldset>
                <div class="mt-4">
                    <button type="submit" class="btn btn-block btn-lg btn-primary rounded-lg">Войти</button>
                </div>
            </EditForm>
        </div>
    </div>
    <p>
        Don't have access to your authenticator device? You can
        <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl">log in with a recovery code</a>.
    </p>

</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }

}
