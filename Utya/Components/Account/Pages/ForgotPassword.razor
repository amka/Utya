@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Utya.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Забыли пароль?</PageTitle>

<section>
    <div class="container w-128 mx-auto px-4 max-w-xl">

        <h1 class="text-5xl py-4 mb-4 text-gradient">Забыли пароль?</h1>
        
        
        <div class="card card-dash bg-base-200 shadow-lg">
            <div class="card-body">
                
                <h2 class="card-title">Укажите ваш email.</h2>
                <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="text-danger" role="alert"/>

                    <fieldset class="fieldset">
                        <legend for="Input.Email" class="fieldet-legend">Email</legend>
                        <InputText @bind-Value="Input.Email" id="Input.Email" class="input w-full rounded-lg"
                                   autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                        <ValidationMessage For="() => Input.Email" class="text-danger"/>
                    </fieldset>
                    <div class="mt-4">
                        <button type="submit" class="rounded-lg btn btn-lg btn-block btn-primary">Reset password
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }

}
