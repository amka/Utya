@page "/App/Links"
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Components.Sections
@rendermode InteractiveWebAssembly

@inject ILogger<Links> Logger
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject IShortLinkService ShortLinkService

@attribute [StreamRendering]


<PageTitle>Ссылки</PageTitle>

<SectionContent SectionName="top-bar">
    <h3 class="text-2xl">Ссылки</h3>

    <label for="create-link-drawer" class="btn btn-primary rounded-lg">
        <i class="fas fa-plus"></i>
        Создать ссылку
    </label>
</SectionContent>


<div class="drawer drawer-end">
    <input id="create-link-drawer" type="checkbox" class="drawer-toggle"/>
    <div class="drawer-content">
        <div class="flex flex-col">
            <div class="p-4">
                <div class="mb-4 sticky top-0">
                    <div class="gap-2">
                        <input
                            type="text"
                            placeholder="Поиск по URL..."
                            class="input w-100 rounded-lg"
                            @bind="_searchTerm"
                            @oninput="OnSearchInput"
                            @onkeyup="OnSearchEnter"
                        />
                        <button class="btn btn-square rounded-lg" @onclick="LoadLinks">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>

                @if (_links == null)
                {
                    <p>Загружаю&hellip;</p>
                }
                else if (!_links.Any())
                {
                    <div class="text-center p-8 text-gray-500">
                        <i class="fas fa-inbox text-4xl mb-2"></i>
                        <p>Ссылки не найдены</p>
                    </div>
                }
                else
                {
                    foreach (var link in _links)
                    {
                        <ShortLinkItem Link="@link" OnCopy="() => { }"/>
                    }
                }
            </div>
        </div>
    </div>

    <div class="drawer-side">

        <div class="flex flex-col flex-grow w-1/2 max-w-[480px] bg-base-100 h-screen shadow-lg">
            <div class="flex px-4 navbar menu-horizontal align-center gap-2">
                <label id="create-form-label" for="create-link-drawer" aria-label="close sidebar"
                       class="btn btn-square btn-soft rounded-lg">
                    <i class="fas fa-arrow-right-from-bracket"></i>
                </label>
                <h3 class="text-2xl">Создать ссылку</h3>
            </div>

            <EditLinkForm Loading="@_loading" OnSave="OnSave" OnCancel="OnCancel"></EditLinkForm>
        </div>
    </div>
</div>

<script>
    function closeCreateForm() {
        document.getElementById('create-form-label').click();
    }
</script>


@code {
    private int _page = 1;
    private int _perPage = 10;
    private string? _searchTerm;
    private List<ShortLinkDto>? _links;
    private CancellationTokenSource? _searchTokenSource;
    private bool _loading = false;

    [CascadingParameter] private Profile? Profile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadLinks();
    }

    private async Task LoadLinks()
    {
        _links = await ShortLinkService.GetLinksAsync(_page, _perPage, Profile?.Id ?? "", _searchTerm);
        StateHasChanged();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString();
        if (_searchTerm is { Length: < 3, Length: > 0 }) return;

        // Cancel previous search if it's still running
        if (_searchTokenSource != null)
        {
            await _searchTokenSource.CancelAsync();
        }

        _searchTokenSource = new CancellationTokenSource();

        // Add a small delay before searching to avoid too many requests
        await Task.Delay(300, _searchTokenSource.Token)
            .ContinueWith(async _ =>
            {
                if (!_searchTokenSource.IsCancellationRequested)
                {
                    await InvokeAsync(LoadLinks);
                }
            }, _searchTokenSource.Token);
    }

    private async Task OnSearchEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") await LoadLinks();
    }

    private async Task OnSave(ShortLinkDto link)
    {
        Logger.LogInformation("OnSave");
        _loading = true;
        await Task.Delay(1);
        try
        {
            var linkRequest = new CreateShortLinkRequest(link.OriginalUrl)
            {
                CustomAlias = link.CustomAlias,
                Password = link.Password,
                ExpiresAt = link.ExpiresAt
            };
            await ShortLinkService.CreateShortLinkAsync(linkRequest, Profile?.Id);
            await JsRuntime.InvokeVoidAsync("closeCreateForm");
            ToastService.ShowSuccess("Ссылка создана");
            
            await LoadLinks();
        }
        finally
        {
            _loading = false;
        }
    }

    private void OnCancel()
    {
    }

}